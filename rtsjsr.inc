!ifdef RTSJSR_INC !eof
RTSJSR_INC=1

;****************************************************************************
; Use JMP indirect to JSR to subroutine
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
; USES:		Register A 
;****************************************************************************
!macro JSRIND .addr {
	lda #>.return_to_here-1
	pha
	lda #<.return_to_here-1
	pha
	jmp (.addr)
.return_to_here:
}

;****************************************************************************
; Use JMP Absolute Indexed Indirect to JSR to subroutine
;****************************************************************************
; INPUT:	.addr - Start of jumptable that is indexed by X
; USES:		Register A 
;****************************************************************************
!macro JSRABSX .addr {
	lda #>.return_to_here-1
	pha
	lda #<.return_to_here-1
	pha
	jmp (.addr, X)
.return_to_here:
}

;****************************************************************************
; JSR to subroutine if BIT 0 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBR0 .zp, .addr {
	bbs0 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 1 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBR1 .zp, .addr {
	bbs1 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 2 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBR2 .zp, .addr {
	bbs2 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 3 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBR3 .zp, .addr {
	bbs3 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 4 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBR4 .zp, .addr {
	bbs4 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 5 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBR5 .zp, .addr {
	bbs5 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 6 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBR6 .zp, .addr {
	bbs6 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 7 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBR7 .zp, .addr {
	bbs7 .zp, +
	jsr .addr
+
}

;****************************************************************************
; Return from subroutine if BIT 0 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBR0 .zp {
	bbs0 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 1 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBR1 .zp {
	bbs1 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 2 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBR2 .zp {
	bbs2 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 3 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBR3 .zp {
	bbs3 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 4 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBR4 .zp {
	bbs4 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 5 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBR5 .zp {
	bbs5 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 6 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBR6 .zp {
	bbs6 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 7 of value in .ZP is reset (0)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBR7 .zp {
	bbs7 .zp, +
	rts
+
}

;****************************************************************************
; JSR to subroutine if BIT 0 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBS0 .zp, .addr {
	bbr0 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 1 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBS1 .zp, .addr {
	bbr1 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 2 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBS2 .zp, .addr {
	bbr2 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 3 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBS3 .zp, .addr {
	bbr3 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 4 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBS4 .zp, .addr {
	bbr4 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 5 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBS5 .zp, .addr {
	bbr5 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 6 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBS6 .zp, .addr {
	bbr6 .zp, +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if BIT 7 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;			.addr - The label of the subroutine
;****************************************************************************
!macro JSRBS7 .zp, .addr {
	bbr7 .zp, +
	jsr .addr
+
}

;****************************************************************************
; Return from subroutine if BIT 0 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBS0 .zp {
	bbr0 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 1 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBS1 .zp {
	bbr1 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 2 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBS2 .zp {
	bbr2 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 3 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBS3 .zp {
	bbr3 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 4 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBS4 .zp {
	bbr4 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 5 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBS5 .zp {
	bbr5 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 6 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBS6 .zp {
	bbr6 .zp, +
	rts
+
}
;****************************************************************************
; Return from subroutine if BIT 7 of value in .ZP is set (1)
;****************************************************************************
; INPUT:	.zp - Value in ZeroPage to test bit on
;****************************************************************************
!macro RETBS7 .zp {
	bbr7 .zp, +
	rts
+
}

;****************************************************************************
; JSR to subroutine if Carry Clear
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
;****************************************************************************
!macro JSRCC .addr {
	bcs +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if Carry Set
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
;****************************************************************************
!macro JSRCS .addr {
	bcc +
	jsr .addr
+
}
;****************************************************************************
; Return from subroutine if Carry Clear
;****************************************************************************
!macro RETCC {
	bcs +
	rts
+
}
;****************************************************************************
; Return from subroutine if Carry Set
;****************************************************************************
!macro RETCS {
	bcc +
	rts
+
}

;****************************************************************************
; JSR to subroutine if Equal
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
;****************************************************************************
!macro JSREQ .addr {
	bne +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if Not Equeal
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
;****************************************************************************
!macro JSRNE .addr {
	beq +
	jsr .addr
+
}
;****************************************************************************
; Return from subroutine if Equal
;****************************************************************************
!macro RETEQ {
	bne +
	rts
+
}
;****************************************************************************
; Return from subroutine if Not Equal
;****************************************************************************
!macro RETNE {
	beq +
	rts
+
}

;****************************************************************************
; JSR to subroutine if Minus
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
;****************************************************************************
!macro JSRMI .addr {
	bpl +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if Plus
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
;****************************************************************************
!macro JSRPL .addr {
	bmi +
	jsr .addr
+
}
;****************************************************************************
; Return from subroutine if Minus
;****************************************************************************
!macro RETMI {
	bpl +
	rts
+
}
;****************************************************************************
; Return from subroutine if Plus
;****************************************************************************
!macro RETPL {
	bmi +
	rts
+
}

;****************************************************************************
; JSR to subroutine if Overflow Clear
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
;****************************************************************************
!maco JSRVC .addr {
	bvs +
	jsr .addr
+
}
;****************************************************************************
; JSR to subroutine if Overflow Set
;****************************************************************************
; INPUT:	.addr - The label of the subroutine
;****************************************************************************
!macro JSRVS .addr {
	bvc +
	jsr .addr
+
}
;****************************************************************************
; Return from subroutine if Overflow Clear
;****************************************************************************
!macro RETVC {
	bvs +
	rts
+
}
;****************************************************************************
; Return from subroutine if Overflow Set
;****************************************************************************
!macro RETVS {
	bvc +
	rts
+
}

